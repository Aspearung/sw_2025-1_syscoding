#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <semaphore.h>
#include <unistd.h>
#include <pthread.h>
#define MAX_SIZE 5

int queue[MAX_SIZE];
int front = 0;
int rear = 0;

int isEmpty() {
    return front == rear;
}

int isFull() {
    return (rear + 1) % MAX_SIZE == front;
}

void enqueue(int item) {
    if (isFull()) {
        printf("queue is full!\n");
        return;
    }
    rear = (rear + 1) % MAX_SIZE;
    queue[rear] = item;
    printf("item enqueue: %d\n", item);
}


int dequeue() {
    if (isEmpty()) {
        printf("queue is empty!\n");
        return -1;
    }
    front = (front + 1) % MAX_SIZE;
    int item = queue[front];
    printf("dequeue: %d\n", item);
    return item;
}

void printqueue() {
    if (isEmpty()) {
        printf("queue is empty\n");
        return;
    }
    printf("큐 내용: ");
    int i = (front + 1) % MAX_SIZE;
    while (i != (rear + 1) % MAX_SIZE) {
        printf("%d ", queue[i]);
        i = (i + 1) % MAX_SIZE;
    }
    printf("\n");
}


sem_t sem;
sem_t full;
sem_t empty;
sem_t mutex;

void* produce(void *arg)
{
        int user;
//produce
        for(int i=0; i<MAX_SIZE; i++)
        {
                sem_wait(&empty);
                sem_wait(&mutex);

                //생산자 물건 생성
                printf("produce start!\n\n");
                printf("물건 만들기: \n");
                scanf("%d",&user);
                enqueue(user);
                printf("produce over!\n\n");
                //생산자 물건 생성

                sem_post(&mutex);
                sem_post(&full);

        }
}


void* consumer(void *arg)
{
//consumer
        for(int i=0; i<MAX_SIZE; i++)
        {
                sem_wait(&full);
                sem_wait(&mutex);

                //소비자 물건 감소
                printf("consumer start!\n\n");
                printqueue();
                dequeue();
                printqueue();
                printf("consumer over!\n\n");
                //소비자 물건 감소

                sem_post(&mutex);
                sem_post(&empty);
        }

}

int main(int argc, int *argv[])
{
        int user;
        int user2 = 4;
        sem_init(&empty, 0, MAX_SIZE - 1);
        sem_init(&full, 0, 0);
        sem_init(&mutex, 0, 1);

        pthread_attr_t attr;
        pthread_t workers[user2];

        pthread_attr_init(&attr);

        pthread_create(&workers[1], &attr, produce, NULL);
        pthread_create(&workers[2], &attr, consumer, NULL);

        for(int i=1; i<user; i++)
        {
                pthread_join(workers[i],NULL);
        }



}
