#include <sys/types.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/mman.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <sys/shm.h>
#include <sys/stat.h>


int main() {
pid_t pid;

    pid = fork();

    if (pid < 0) {
        fprintf(stderr, "fork failed\n");
        return 1;
    }
    else if (pid == 0) {
        //execlp("/bin/ls", "ls", NULL);
        printf("helloson\n");
        //here is child!

        /* the size (in bytes) of shared memory object */
        const int SIZE = 4096;

        /* name of the shared memory object */
        const char *name = "OS";

        /* shared memory file descriptor */
        int shm_fd;

        /* pointer to shared memory object */
        void *ptr;

        /* open the shared memory object */
        shm_fd = shm_open(name, O_RDONLY, 0666);

        /* memory map the shared memory object */
        ptr = mmap(0, SIZE, PROT_READ, MAP_SHARED, shm_fd, 0);

        /* check for errors in mmap */
        if (ptr == MAP_FAILED) {
            perror("mmap failed");
            return 1;
        }

         /* read from the shared memory object */
        printf("%s", (char *)ptr);
        printf("i am sonson\n\n");
        /* remove the shared memory object */
        shm_unlink(name);

        return 0;
    }



    else {
        //wait(NULL);
        sleep(3);
        printf("child complete\n");
        //here is parent

        /* the size (in bytes) of shared memory object */
        const int SIZE = 4096;

        /* name of the shared memory object */
        const char *name = "OS";

        /* strings written to shared memory */
        const char *message_0 = "Hello";
        const char *message_1 = "World!";

        /* shared memory file descriptor */
        int shm_fd;

        /* pointer to shared memory object */
        void *ptr;

        /* create the shared memory object */
        shm_fd = shm_open(name, O_CREAT | O_RDWR, 0666);

        /* configure the size of the shared memory object */
        ftruncate(shm_fd, SIZE);

        /* memory map the shared memory object */
        ptr =mmap(0, SIZE, PROT_WRITE, MAP_SHARED, shm_fd, 0);

        /* write to the shared memory object */
        printf("hellopa");
        printf("hello i am ung");
        sprintf(ptr, "%s", message_0);
        ptr += strlen(message_0);
        sprintf(ptr, "%s", message_1);
        ptr += strlen(message_1);

        return 0;
    }


        wait(NULL);

        return 0;
}

